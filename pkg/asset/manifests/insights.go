package manifests

import (
	"path/filepath"

	"github.com/ghodss/yaml"
	operatorv1 "github.com/openshift/api/operator/v1"
	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/installconfig"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

var clusterInsightsOperatorFile = filepath.Join(manifestDir, "cluster-insights-operator.yaml")

type Insights struct {
	FileList []*asset.File
}

func (i *Insights) Name() string {
	return "Insights Operator"
}

func (i *Insights) Generate(dependencies asset.Parents) error {
	insightsOp, err := i.generateDefaultInsightsOperatorResource()
	if err != nil {
		return errors.Wrap(err, "failed to create Insights operator resource")
	}
	if len(insightsOp) > 0 {
		i.FileList = append(i.FileList, &asset.File{
			Filename: clusterInsightsOperatorFile,
			Data:     insightsOp,
		})
	}
	return nil
}

func (*Insights) Dependencies() []asset.Asset {
	return []asset.Asset{
		&installconfig.InstallConfig{},
	}
}

func (i *Insights) generateDefaultInsightsOperatorResource() ([]byte, error) {

	insightsOpObj := operatorv1.InsightsOperator{
		TypeMeta: metav1.TypeMeta{
			APIVersion: operatorv1.GroupVersion.String(),
			Kind:       "InsightsOperator",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name: "cluster",
		},
	}

	return yaml.Marshal(insightsOpObj)
}

// Files returns the files generated by the asset.
func (i *Insights) Files() []*asset.File {
	return i.FileList
}
